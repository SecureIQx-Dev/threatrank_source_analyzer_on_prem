name: Vulnerability Analyzer

env:
  REPO_USER: SecureIQx-Dev
  REPO_NAME: threatrank_source_analyzer_on_prem
  ISSUE_CREATION: false
  SHARED_ARTIFACTS_PATH: "/mnt/artifacts"       # adjust as needed for your on-prem storage

on:
  workflow_call:
    inputs:
      repo_path:
        type: string
        description: "Path to analyze"
        required: true
        default: "."
      cvss_lower_bound:
        type: string
        description: "CVSS lower bound"
        required: false
        default: "HIGH"
      epss_percentile_lower_bound:
        type: string
        description: "EPSS percentile lower bound"
        required: false
        default: "0.00"
    secrets:
      pat:
        description: "Personal Access Token"
        required: true
      gemini_api_key:
        description: "Gemini API Key"
        required: false
      license_key:
        description: "Vulnerability Analyzer License Key"
        required: false

jobs:
  threatrank_analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout target repository
        run: |
          git clone "$GITHUB_SERVER_URL/${{ github.repository }}" "${{ github.event.repository.name }}"
        shell: bash

      - name: ThreatRank-Step-1
        run: |
          git clone "$GITHUB_SERVER_URL/${{ env.REPO_USER }}/${{ env.REPO_NAME }}" "./${{ env.REPO_NAME }}"
        shell: bash

      - name: ThreatRank-Step-2
        run: |
          mkdir -p "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer/artifacts"
        shell: bash

      - name: ThreatRank-Step-3 (air-gapped Trivy install)
        working-directory: "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer"
        run: |
          mkdir -p "$HOME/bin"
          tar -xzf trivy_0.63.0_Linux-64bit.tar.gz -C "$HOME/bin"
          chmod +x "$HOME/bin/trivy"
          echo "$HOME/bin" >> "$GITHUB_PATH"
        shell: bash

      - name: ThreatRank-Step-4 (air-gapped Trivy)
        working-directory: "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer"
        run: |
          mkdir -p trivy-cache/db artifacts
          tar xzf trivy-offline.db.tar.gz -C trivy-cache/db

          trivy fs \
            --cache-dir trivy-cache \
            --skip-db-update \
            --scanners vuln \
            --format cyclonedx \
            --output artifacts/${{ github.event.repository.name }}.cyclonedx.json \
            "${{ inputs.repo_path }}"

          trivy fs \
            --cache-dir trivy-cache \
            --skip-db-update \
            --scanners vuln \
            --format json \
            --output artifacts/${{ github.event.repository.name }}.json \
            "${{ inputs.repo_path }}"
        shell: bash

      - name: ThreatRank-Step-5
        working-directory: "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer"
        env:
          LICENSE_KEY: ${{ secrets.license_key }}
        run: |
          chmod -R 777 ./utils/vulnerability_analyzer
          ./utils/vulnerability_analyzer create_cve_list "artifacts/${{ github.event.repository.name }}" "${LICENSE_KEY}"
        shell: bash

      - name: ThreatRank-Step-6
        run: |
          mkdir -p "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer/artifacts/output-dir"
        shell: bash

      - name: ThreatRank-Step-7
        working-directory: "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer"
        run: |
          cat << 'EOF' > run_grep.sh
          #!/bin/bash
          query="$1"
          dir_name="$2"
          grep -ri "$query" --include=*.{py,js,ts,java,cpp,h,c,cs,php,rb,sh,go,rs,swift,kotlin,html,css,xml,yml,json,yaml,toml,sql,pl,pm,r,lua} "$dir_name" > artifacts/output-dir/temp_grep_results.txt
          EOF

          chmod +x run_grep.sh
          chmod -R 777 artifacts

          pwd
          ls -al
        shell: bash

      - name: ThreatRank-Step-8 [TIME ESTIMATE HERE]
        working-directory: "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer"
        env:
          EPSS_PERCENTILE_LOWER_BOUND: ${{ inputs.epss_percentile_lower_bound }}
          CVSS_LOWER_BOUND: ${{ inputs.cvss_lower_bound }}
          LICENSE_KEY: ${{ secrets.license_key }}
        run: |
          ./utils/vulnerability_analyzer clean_cve_list "${CVSS_LOWER_BOUND}" "${EPSS_PERCENTILE_LOWER_BOUND}" "${LICENSE_KEY}"
        shell: bash

      - name: ThreatRank-Step-9 [MAIN ANALYSIS STEP]
        working-directory: "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer"
        env:
          GEMINI_API_KEY: ${{ secrets.gemini_api_key }}
          REPO_PATH: "${{ inputs.repo_path }}"
          ROOT_PATH: "${{ github.workspace }}/${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer"
          LICENSE_KEY: ${{ secrets.license_key }}
        run: |
          ./utils/vulnerability_analyzer run_analysis "${REPO_PATH}" "${ROOT_PATH}" "${LICENSE_KEY}" "${GEMINI_API_KEY}"
        shell: bash

      - name: ThreatRank-Step-10
        working-directory: "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer"
        env:
          LICENSE_KEY: ${{ secrets.license_key }}
        run: |
          ./utils/vulnerability_analyzer run_cleanup "${LICENSE_KEY}"
        shell: bash

      # Push High Threat Notification ~ START ~

      - name: Find Latest CSV File
        if: env.ISSUE_CREATION == 'true'
        working-directory: "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer/artifacts/output-dir"
        id: find_csv
        run: |
          LATEST_FILE=$(ls -t final-threatrank-analysis-*.csv | head -n 1)
          if [ -z "$LATEST_FILE" ]; then
            echo "No matching CSV file found."
            exit 1
          fi
          echo "latest_csv=$LATEST_FILE" >> "$GITHUB_ENV"
          echo "Found CSV file: $LATEST_FILE"
        shell: bash

      - name: Check for High-Threat Entries
        if: env.ISSUE_CREATION == 'true'
        working-directory: "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer/artifacts/output-dir"
        id: check_threats
        run: |
          if grep -qi "threatrank-classification" "$latest_csv"; then
            if awk -F, '$0 ~ /high-threat/ {exit 1}' "$latest_csv"; then
              echo "No high-threat detected."
              echo "high_threat=false" >> "$GITHUB_ENV"
            else
              echo "High-threat detected!"
              echo "high_threat=true" >> "$GITHUB_ENV"
            fi
          else
            echo "Column threatrank-classification not found!"
            exit 1
          fi
        shell: bash

      - name: Create GitHub Issue
        if: env.ISSUE_CREATION == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.pat }}
          FILE: ${{ env.latest_csv }}
          HIGH_THREAT: ${{ env.high_threat }}
        run: |
          TITLE=$( if [ "$HIGH_THREAT" = "true" ]; then echo "ðŸš¨ High-Threat CVE(s) detected by IQx ThreatRank"; else echo "âœ… No High-Threat CVE(s) detected by IQx ThreatRank"; fi )
          BODY="A $( [ "$HIGH_THREAT" = "true" ] && echo "high-threat" || echo "no-high-threat" ) has been identified in the file \`${FILE}\`. Please review immediately."
          curl -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               -d "{\"title\":\"$TITLE\",\"body\":\"$BODY\"}" \
               "$GITHUB_SERVER_URL/api/v3/repos/${{ github.repository }}/issues"
        shell: bash

      # Push High Threat Notification ~ END ~

      - name: ThreatRank-Step-11
        run: |
          mkdir -p "${SHARED_ARTIFACTS_PATH}/threatrank-output"
          cp "./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer/artifacts/output-dir/final-threatrank-analysis-*.csv" "${SHARED_ARTIFACTS_PATH}/threatrank-output/"
        shell: bash

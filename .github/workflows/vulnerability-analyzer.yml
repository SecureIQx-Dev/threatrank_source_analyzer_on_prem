name: Vulnerability Analyzer
env:
  REPO_USER: SecureIQx-Dev
  REPO_NAME: threatrank_source_analyzer_on_prem
  ISSUE_CREATION: false

on:
  workflow_call:
    inputs:
      repo_path:
        type: string
        description: "Path to analyze"
        required: true
        default: "."
      cvss_lower_bound:
        type: string
        description: "CVSS lower bound"
        required: false
        default: "HIGH"
      epss_percentile_lower_bound:
        type: string
        description: "EPSS percentile lower bound"
        required: false
        default: "0.00"
    secrets:
      pat:
        description: "Personal Access Token"
        required: true
      gemini_api_key:
        description: "Gemini API Key"
        required: false
      license_key:
        description: "Vulnerability Analyzer License Key"
        required: true

jobs:
  threatrank_analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ github.event.repository.name }}

      - name: ThreatRank-Step-1
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_USER }}/${{ env.REPO_NAME }}
          ref: main
          path: ./${{ env.REPO_NAME }}
          token: ${{ secrets.pat }}

      - name: ThreatRank-Step-2
        run: mkdir -p ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer/artifacts

      - name: ThreatRank-Step-3 (air-gapped Trivy install)
        working-directory: ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer
        run: |
          mkdir -p $HOME/bin
          tar -xzf trivy_0.63.0_Linux-64bit.tar.gz -C $HOME/bin
          chmod +x $HOME/bin/trivy

          echo "$HOME/bin" >> $GITHUB_PATH
        
      - name: ThreatRank-Step-4 (air-gapped Trivy)
        working-directory: ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer
        run: |
          mkdir -p trivy-cache/db
          tar xzf trivy-offline.db.tgz -C trivy-cache/db
          mkdir -p artifacts

          trivy fs \
            --cache-dir trivy-cache \
            --skip-db-update \               
            --scanners vuln \                
            --format cyclonedx \
            --output "artifacts/${{ github.event.repository.name }}.cyclonedx.json" \
            "${{ github.workspace }}/${{ github.event.repository.name }}"

          trivy fs \
            --cache-dir trivy-cache \
            --skip-db-update \
            --scanners vuln \
            --format json \
            --output "artifacts/${{ github.event.repository.name }}.json" \
            "${{ github.workspace }}/${{ github.event.repository.name }}"

      - name: ThreatRank-Step-5
        working-directory: ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer
        env:
          LICENSE_KEY: ${{ secrets.license_key }}
        run: |
          chmod -R 777 ./utils/vulnerability_analyzer
          ./utils/vulnerability_analyzer create_cve_list "artifacts/${{ github.event.repository.name }}" "${LICENSE_KEY}"

      - name: ThreatRank-Step-6
        run: mkdir -p ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer/artifacts/output-dir

      - name: ThreatRank-Step-7
        working-directory: ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer
        run: |
          cat << 'EOF' > run_grep.sh
          #!/bin/bash
          query="$1"
          dir_name="$2"
          grep -ri "$query" --include=*.{py,js,ts,java,cpp,h,c,cs,php,rb,sh,go,rs,swift,kotlin,html,css,xml,yml,json,yaml,toml,sql,pl,pm,r,lua} "$dir_name" > artifacts/output-dir/temp_grep_results.txt
          EOF

          chmod +x run_grep.sh
          chmod -R 777 artifacts

          pwd
          ls -al

      - name: ThreatRank-Step-8 [TIME ESTIMATE HERE]
        working-directory: ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer
        env:
          EPSS_PERCENTILE_LOWER_BOUND: ${{ inputs.epss_percentile_lower_bound }}
          CVSS_LOWER_BOUND: ${{ inputs.cvss_lower_bound }}
          LICENSE_KEY: ${{ secrets.license_key }}
        run: |
          ./utils/vulnerability_analyzer clean_cve_list "${CVSS_LOWER_BOUND}" "${EPSS_PERCENTILE_LOWER_BOUND}" "${LICENSE_KEY}"

      - name: ThreatRank-Step-9 [MAIN ANALYSIS STEP]
        working-directory: ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer
        env:
          GEMINI_API_KEY: ${{ secrets.gemini_api_key }}
          REPO_PATH: "/home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/${{ github.event.repository.name }}"
          ROOT_PATH: "/home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer"
          LICENSE_KEY: ${{ secrets.license_key }}
        run: |
          ./utils/vulnerability_analyzer run_analysis "${REPO_PATH}" "${ROOT_PATH}" "${LICENSE_KEY}" "${GEMINI_API_KEY}"

      - name: ThreatRank-Step-10
        working-directory: ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer
        env:
          LICENSE_KEY: ${{ secrets.license_key }}
        run: |
          ./utils/vulnerability_analyzer run_cleanup "${LICENSE_KEY}"

      # Push High Threat Notification ~ START ~

      - name: Find Latest CSV File
        if: env.ISSUE_CREATION == 'true'
        working-directory: ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer/artifacts/output-dir
        id: find_csv
        run: |
          LATEST_FILE=$(ls -t final-threatrank-analysis-*.csv | head -n 1)
          if [ -z "$LATEST_FILE" ]; then
            echo "No matching CSV file found."
            exit 1
          fi
          echo "latest_csv=$LATEST_FILE" >> $GITHUB_ENV
          echo "Found CSV file: $LATEST_FILE"

      - name: Check for High-Threat Entries
        if: env.ISSUE_CREATION == 'true'
        working-directory: ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer/artifacts/output-dir
        id: check_threats
        run: |
          if grep -qi "threatrank-classification" "$latest_csv"; then
            if awk -F, '$0 ~ /high-threat/ {exit 1}' "$latest_csv"; then
              echo "No high-threat detected."
              echo "high_threat=false" >> $GITHUB_ENV
            else
              echo "High-threat detected!"
              echo "high_threat=true" >> $GITHUB_ENV
            fi
          else
            echo "Column threatrank-classification not found!"
            exit 1
          fi

      - name: Create GitHub Issue
        if: env.ISSUE_CREATION == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const file = process.env.latest_csv;
            const highThreat = process.env.high_threat === 'true';

            const title = highThreat
              ? 'ðŸš¨ High-Threat CVE(s) detected by IQx ThreatRank'
              : 'âœ… No High-Threat CVE(s) detected by IQx ThreatRank';

            const body = `A ${highThreat ? 'high-threat' : 'no high-threat'} has been identified in the file `${file}`. Please review the findings immediately.`;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Push High Threat Notification ~ END ~

      - name: ThreatRank-Step-11
        uses: actions/upload-artifact@v4
        with:
          name: "[${{ github.event.repository.name }}]-threatrank-output"
          path: ./${{ env.REPO_NAME }}/.github/workflows/vulnerability-analyzer/artifacts/output-dir/final-threatrank-analysis-*.csv
          if-no-files-found: error
